This file describes the development process I followed for the code, and a bit on how I think. The detailed test plan (13 pages on performance and functionality testing) was written earlier.

It took about 3 hours on Saturday to put a coding plan together and do some basic research. Implementation took about 10 hours, spread over Sunday and Monday, which includes the time to learn Python. I love to love my work, so I build my days around it.

    I spent some Saturday afternoon time riding my recumbent bicycle around Golden Gate Park, with several breaks where I would work on my frisbee throws, sketch out some technical approaches and see how they fit the goals I imagined I would want if I were the reviewer. Then I put a plan together after dinner, alternating between gardening and snippets of google research into testing rigs, with maybe a glass of red or two over a decent-enough sunset view :-)
    On Sunday, I hacked a few prototypes together: one prototype to hit the server in a few different ways to test my implementation path and one to teach myself a bit of Python and to see if it would do what I wanted. Alternating between the two, I built up a pseudo-code framework on the logic and lashed together some snippets of Python from the web into a functional prototype, feeding back some further improvements into the logical framework. I like to iterate at first in pseudo-code: the iteration loops are much faster and the compiler doesn't get in the way as you smooth out the logic.
    I love this quickie prototype approach where you can get real world feedback into your logical framework: how to adapt the framework to the new usage data, where to add some fault tolerance in the code, and an automated test that let's me know, right now, is this code doing, at this stage of development, what I need it to, for every single code change I make.
    On Monday, all I had to do was to move the prototypes into something solid, code in some data validation, clean up the name space, eliminate magic numbers and strip out code duplication. Performance tests showed nothing interesting, so I skimped there. I built in some mock'ish objects to speed the iteration loop and to control the conditions so I could do the refactoring phase literally step by step, testing at every step that the full system functionality still worked.
    I had some extra time at the end, so I added some shell/curl scripts to test the system in an easy-to-integrate into existing tools and processes. I refactored some of the code to increase readability. I added a bit more exception handling coverage, and built in a way to trigger it (for self-testing). One refactor (eliminating some duplication in the shell scripts) I decided wasn't worth the overtime that night, so I left some Refactoring Notes embedded in the code, for the next programmer to use. I am geeky enough that I follow the Boy Scouts model: you leave every campsite a little better that it was when before you got there ;-)

I can run long on words sometimes (and keep them short when needed), but I thought you'd want to know my process: do I analyze, plan, communicate and tackle problems at a leadership level. I emphasized rapid iteration via prototyping and TDD: they have long been obsessions of mine, in everything I do. But I also see Blizzard as a group who share my passion for highly iterative creation, polish and scale processes, so I thought writing this would help them evaluate if I would fit in, and if I could contribute to process improvement, planning and more.

I've been obsessing with TDD for over a decade; I've found it essential for rapid iteration in the sorts of experimental, large-scale software systems that I've worked on in the past, and to keep the systems agile as you go forward. One of my goals at KIXEYE was to prove out metrics and TDD as a way to accelerate the development cycle, reduce development and testing costs, while also providing significant improvements in server uptime, and high test coverage (via a blend of manual and automated tests).  We found this blended-TDD across management, engineering and quality allowed us to provide a much higher quality player experience at both a much lower cost of operations and a lower cost of new content. Our best results were when we blended the testing work across ... Well, we can talk about that one later ;-)

I also assume you'd want to see if my personality is a fit from a company culture perspective, and the "is this I guy I'd enjoy bouncing around ideas with, in front of the white board or over a pitcher of beer, or while throwing frisbees in the park?" perspective.

I like to polish things that I do, and that isn't the worst obsession to have, right? In fact, my obsession is having obsessions, so I look to throw myself into whatever I'm doing; producing clean, practical plans that produce clean, practical code, or playing in wrestling, rugby, ultimate frisbee or the board game Go in tournaments across the world. Essentially, I'm a learning junkie. I'll zone in on two or three obsessions for five or ten years each, then move on. I'm not a generalist, I'm a serial expert on many different things, like ancient history, modern dance or Tai Chi. But a side-effect problem exists: I'm dumber than the average stump on things I haven't obsessed over; I know little of graphics or higher math, for example.

My arty side is collecting science-fiction art, writing about iterative innovation processes, writing alternate history science fiction books, and designing my gardens with an iterative, user experience focused process, one not unlike how I see game development. Except the iteration cycles are much faster in games than in gardens ;-) The stunning beauty of next-gen games is a big attraction for me.

I've been in the online game industry for over a decade and the distributed systems research world before that. And I've found I like working with the type of people who tend to work in such worlds. I love to bounce around ideas, on anything, really. The value to me is in the journey, the team you make it with, and the polish of the end goals. I love the hills and valleys of the creative and learning process, going from nervous novice to journeyman and living to tell the tale to the next generation. I measure success by the number of Aha! moments per week and by the number of laughs per day with the team.
